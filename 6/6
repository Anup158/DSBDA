# Import required libraries
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay

# Load dataset
data = pd.read_csv("https://raw.githubusercontent.com/plotly/datasets/master/iris-data.csv")

# Basic inspection
print(data.shape)
print(data.head())
print(data.tail())
print(data.info())
print(data.describe())
print(data.isnull().sum())

# Define X and y
X = data.drop(['class'], axis=1)
y = data['class']

print(X)
print(y)
print(X.shape)
print(y.shape)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=True)
print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

# Train the model
model = GaussianNB()
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)
print("Accuracy score:", accuracy_score(y_test, y_pred))

# Confusion matrix
cm = confusion_matrix(y_test, y_pred)
print("Confusion matrix:\n", cm)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()
plt.show()

# Function to extract confusion matrix values
def get_confusion_matrix_values(y_true, y_pred):
    cm = confusion_matrix(y_true, y_pred)
    TP = cm[0][0]
    FP = cm[0][1]
    FN = cm[1][0]
    TN = cm[1][1]
    return TP, FP, FN, TN

TP, FP, FN, TN = get_confusion_matrix_values(y_test, y_pred)
print("TP:", TP)
print("FP:", FP)
print("FN:", FN)
print("TN:", TN)

# Calculate precision, recall, accuracy
print("The Accuracy is", (TP + TN) / (TP + TN + FP + FN))
print("The precision is", TP / (TP + FP) if (TP + FP) != 0 else 0)
print("The recall is", TP / (TP + FN) if (TP + FN) != 0 else 0)
